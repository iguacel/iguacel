{"version":3,"sources":["../node_modules/threejs-meshline/src/index.js","exp/Exp13.js"],"names":["THREE","this","require","Error","MeshLine","BufferGeometry","call","type","positions","previous","next","side","width","indices_array","uvs","counters","_vertices","_bufferArray","widthCallback","matrixWorld","Matrix4","Object","defineProperties","geometry","enumerable","get","set","value","setFromGeometry","vertices","setVertices","bufferArray","setBufferArray","MeshLineRaycast","raycaster","intersects","inverseMatrix","ray","Ray","sphere","Sphere","interRay","Vector3","copy","boundingSphere","applyMatrix4","intersectSphere","getInverse","vStart","vEnd","interSegment","step","LineSegments","index","attributes","indices","array","position","widths","i","l","length","a","b","fromArray","undefined","Math","floor","precision","params","Line","threshold","material","lineWidth","precisionSq","distanceSqToSegment","distance","origin","distanceTo","near","far","push","point","clone","face","faceIndex","object","memcpy","src","srcOffset","dst","dstOffset","subarray","slice","buffer","MeshLineMaterial","parameters","ShaderMaterial","uniforms","assign","UniformsLib","fog","map","useMap","alphaMap","useAlphaMap","color","Color","opacity","resolution","Vector2","sizeAttenuation","dashArray","dashOffset","dashRatio","useDash","visibility","alphaTest","repeat","vertexShader","ShaderChunk","meshline_vert","fragmentShader","meshline_frag","setValues","prototype","create","constructor","isMeshLine","setMatrixWorld","g","c","Geometry","getAttribute","Float32Array","Array","setGeometry","vts","wcb","j","v","x","y","z","process","ba","raycast","compareV3","aa","ab","copyV3","w","n","_attributes","count","copyArray","needsUpdate","uv","Uint16Array","BufferAttribute","setAttribute","setIndex","computeBoundingSphere","computeBoundingBox","advance","logdepthbuf_pars_vertex","fog_pars_vertex","logdepthbuf_vertex","fog_vertex","join","fog_pars_fragment","logdepthbuf_pars_fragment","logdepthbuf_fragment","fog_fragment","isMeshLineMaterial","source","module","exports","extend","meshline","Rig","mouse","camera","useThree","useFrame","current","lookAt","colors","BgLine","useRef","attach","vertex","ref","transparent","depthTest","AnimatedLine","speed","Lines","useMemo","fill","_","max","random","props","key","useState","bgColor","setBgColor","onClick","rando","parseInt","opacityRando","chroma","alpha","hex","changeBg","style","display","justifyContent","alignItems","flexFlow","height","cursor","background","colorManagement","fov","onMouseMove","e","clientX","window","innerWidth","clientY","innerHeight"],"mappings":"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","file":"static/js/30.d63b4c4e.chunk.js","sourcesContent":[";(function() {\n  'use strict'\n\n  var root = this\n\n  var has_require = typeof require !== 'undefined'\n\n  var THREE = root.THREE || (has_require && require('three'))\n  if (!THREE) throw new Error('MeshLine requires three.js')\n\n  function MeshLine() {\n    THREE.BufferGeometry.call(this)\n    this.type = 'MeshLine'\n\n    this.positions = []\n\n    this.previous = []\n    this.next = []\n    this.side = []\n    this.width = []\n    this.indices_array = []\n    this.uvs = []\n    this.counters = []\n    this._vertices = []\n    this._bufferArray = []\n\n    this.widthCallback = null\n\n    // Used to raycast\n    this.matrixWorld = new THREE.Matrix4()\n\n    // to support previous api\n    Object.defineProperties(this, {\n      geometry: {\n        enumerable: true,\n        get: function() {\n          return this\n        },\n        set: function(value) {\n          this.setFromGeometry(value)\n        },\n      },\n      vertices: {\n        enumerable: true,\n        get: function() {\n          return this._vertices\n        },\n        set: function(value) {\n          this.setVertices(value)\n        },\n      },\n      bufferArray: {\n        enumerable: true,\n        get: function() {\n          return this._bufferArray\n        },\n        set: function(value) {\n          this.setBufferArray(value)\n        },\n      },\n    })\n  }\n\n  MeshLine.prototype = Object.create(THREE.BufferGeometry.prototype)\n  MeshLine.prototype.constructor = MeshLine\n  MeshLine.prototype.isMeshLine = true\n\n  MeshLine.prototype.setMatrixWorld = function(matrixWorld) {\n    this.matrixWorld = matrixWorld\n  }\n\n  MeshLine.prototype.setFromGeometry = function(g, c) {\n    if (g instanceof THREE.Geometry) {\n      this.setVertices(g.vertices, c)\n    }\n    if (g instanceof THREE.BufferGeometry) {\n      this.setBufferArray(g.getAttribute('position').array, c)\n    }\n    if (g instanceof Float32Array || g instanceof Array) {\n      // to support previous api\n      this.setBufferArray(g, c)\n    }\n  }\n\n  // to support previous api\n  MeshLine.prototype.setGeometry = function(g, c) {\n    this.setFromGeometry(g, c)\n  }\n\n  MeshLine.prototype.setVertices = function(vts, wcb) {\n    this._vertices = vts\n    this.widthCallback = wcb || this.widthCallback\n    this.positions = []\n    this.counters = []\n    for (var j = 0; j < vts.length; j++) {\n      var v = vts[j]\n      var c = j / vts.length\n      this.positions.push(v.x, v.y, v.z)\n      this.positions.push(v.x, v.y, v.z)\n      this.counters.push(c)\n      this.counters.push(c)\n    }\n    this.process()\n  }\n\n  MeshLine.prototype.setBufferArray = function(ba, wcb) {\n    this._bufferArray = ba\n    this.widthCallback = wcb || this.widthCallback\n    this.positions = []\n    this.counters = []\n    for (var j = 0; j < ba.length; j += 3) {\n      var c = j / ba.length\n      this.positions.push(ba[j], ba[j + 1], ba[j + 2])\n      this.positions.push(ba[j], ba[j + 1], ba[j + 2])\n      this.counters.push(c)\n      this.counters.push(c)\n    }\n    this.process()\n  }\n\n  function MeshLineRaycast(raycaster, intersects) {\n    var inverseMatrix = new THREE.Matrix4()\n    var ray = new THREE.Ray()\n    var sphere = new THREE.Sphere()\n    var interRay = new THREE.Vector3()\n    var geometry = this.geometry\n    // Checking boundingSphere distance to ray\n\n    sphere.copy(geometry.boundingSphere)\n    sphere.applyMatrix4(this.matrixWorld)\n\n    if (raycaster.ray.intersectSphere(sphere, interRay) === false) {\n      return\n    }\n\n    inverseMatrix.getInverse(this.matrixWorld)\n    ray.copy(raycaster.ray).applyMatrix4(inverseMatrix)\n\n    var vStart = new THREE.Vector3()\n    var vEnd = new THREE.Vector3()\n    var interSegment = new THREE.Vector3()\n    var step = this instanceof THREE.LineSegments ? 2 : 1\n    var index = geometry.index\n    var attributes = geometry.attributes\n\n    if (index !== null) {\n      var indices = index.array\n      var positions = attributes.position.array\n      var widths = attributes.width.array\n\n      for (var i = 0, l = indices.length - 1; i < l; i += step) {\n        var a = indices[i]\n        var b = indices[i + 1]\n\n        vStart.fromArray(positions, a * 3)\n        vEnd.fromArray(positions, b * 3)\n        var width = widths[Math.floor(i / 3)] != undefined ? widths[Math.floor(i / 3)] : 1\n        var precision = raycaster.params.Line.threshold + (this.material.lineWidth * width) / 2\n        var precisionSq = precision * precision\n\n        var distSq = ray.distanceSqToSegment(vStart, vEnd, interRay, interSegment)\n\n        if (distSq > precisionSq) continue\n\n        interRay.applyMatrix4(this.matrixWorld) //Move back to world space for distance calculation\n\n        var distance = raycaster.ray.origin.distanceTo(interRay)\n\n        if (distance < raycaster.near || distance > raycaster.far) continue\n\n        intersects.push({\n          distance: distance,\n          // What do we want? intersection point on the ray or on the segment??\n          // point: raycaster.ray.at( distance ),\n          point: interSegment.clone().applyMatrix4(this.matrixWorld),\n          index: i,\n          face: null,\n          faceIndex: null,\n          object: this,\n        })\n        // make event only fire once\n        i = l\n      }\n    }\n  }\n  MeshLine.prototype.raycast = MeshLineRaycast\n  MeshLine.prototype.compareV3 = function(a, b) {\n    var aa = a * 6\n    var ab = b * 6\n    return (\n      this.positions[aa] === this.positions[ab] &&\n      this.positions[aa + 1] === this.positions[ab + 1] &&\n      this.positions[aa + 2] === this.positions[ab + 2]\n    )\n  }\n\n  MeshLine.prototype.copyV3 = function(a) {\n    var aa = a * 6\n    return [this.positions[aa], this.positions[aa + 1], this.positions[aa + 2]]\n  }\n\n  MeshLine.prototype.process = function() {\n    var l = this.positions.length / 6\n\n    this.previous = []\n    this.next = []\n    this.side = []\n    this.width = []\n    this.indices_array = []\n    this.uvs = []\n\n    var w\n\n    var v\n    // initial previous points\n    if (this.compareV3(0, l - 1)) {\n      v = this.copyV3(l - 2)\n    } else {\n      v = this.copyV3(0)\n    }\n    this.previous.push(v[0], v[1], v[2])\n    this.previous.push(v[0], v[1], v[2])\n\n    for (var j = 0; j < l; j++) {\n      // sides\n      this.side.push(1)\n      this.side.push(-1)\n\n      // widths\n      if (this.widthCallback) w = this.widthCallback(j / (l - 1))\n      else w = 1\n      this.width.push(w)\n      this.width.push(w)\n\n      // uvs\n      this.uvs.push(j / (l - 1), 0)\n      this.uvs.push(j / (l - 1), 1)\n\n      if (j < l - 1) {\n        // points previous to poisitions\n        v = this.copyV3(j)\n        this.previous.push(v[0], v[1], v[2])\n        this.previous.push(v[0], v[1], v[2])\n\n        // indices\n        var n = j * 2\n        this.indices_array.push(n, n + 1, n + 2)\n        this.indices_array.push(n + 2, n + 1, n + 3)\n      }\n      if (j > 0) {\n        // points after poisitions\n        v = this.copyV3(j)\n        this.next.push(v[0], v[1], v[2])\n        this.next.push(v[0], v[1], v[2])\n      }\n    }\n\n    // last next point\n    if (this.compareV3(l - 1, 0)) {\n      v = this.copyV3(1)\n    } else {\n      v = this.copyV3(l - 1)\n    }\n    this.next.push(v[0], v[1], v[2])\n    this.next.push(v[0], v[1], v[2])\n\n    // redefining the attribute seems to prevent range errors \n    // if the user sets a differing number of vertices\n    if (!this._attributes || this._attributes.position.count !== this.positions.length) {\n      this._attributes = {\n        position: new THREE.BufferAttribute(new Float32Array(this.positions), 3),\n        previous: new THREE.BufferAttribute(new Float32Array(this.previous), 3),\n        next: new THREE.BufferAttribute(new Float32Array(this.next), 3),\n        side: new THREE.BufferAttribute(new Float32Array(this.side), 1),\n        width: new THREE.BufferAttribute(new Float32Array(this.width), 1),\n        uv: new THREE.BufferAttribute(new Float32Array(this.uvs), 2),\n        index: new THREE.BufferAttribute(new Uint16Array(this.indices_array), 1),\n        counters: new THREE.BufferAttribute(new Float32Array(this.counters), 1),\n      }\n    } else {\n      this._attributes.position.copyArray(new Float32Array(this.positions))\n      this._attributes.position.needsUpdate = true\n      this._attributes.previous.copyArray(new Float32Array(this.previous))\n      this._attributes.previous.needsUpdate = true\n      this._attributes.next.copyArray(new Float32Array(this.next))\n      this._attributes.next.needsUpdate = true\n      this._attributes.side.copyArray(new Float32Array(this.side))\n      this._attributes.side.needsUpdate = true\n      this._attributes.width.copyArray(new Float32Array(this.width))\n      this._attributes.width.needsUpdate = true\n      this._attributes.uv.copyArray(new Float32Array(this.uvs))\n      this._attributes.uv.needsUpdate = true\n      this._attributes.index.copyArray(new Uint16Array(this.indices_array))\n      this._attributes.index.needsUpdate = true\n    }\n\n    this.setAttribute('position', this._attributes.position)\n    this.setAttribute('previous', this._attributes.previous)\n    this.setAttribute('next', this._attributes.next)\n    this.setAttribute('side', this._attributes.side)\n    this.setAttribute('width', this._attributes.width)\n    this.setAttribute('uv', this._attributes.uv)\n    this.setAttribute('counters', this._attributes.counters)\n\n    this.setIndex(this._attributes.index)\n\n    this.computeBoundingSphere()\n    this.computeBoundingBox()\n  }\n\n  function memcpy(src, srcOffset, dst, dstOffset, length) {\n    var i\n\n    src = src.subarray || src.slice ? src : src.buffer\n    dst = dst.subarray || dst.slice ? dst : dst.buffer\n\n    src = srcOffset\n      ? src.subarray\n        ? src.subarray(srcOffset, length && srcOffset + length)\n        : src.slice(srcOffset, length && srcOffset + length)\n      : src\n\n    if (dst.set) {\n      dst.set(src, dstOffset)\n    } else {\n      for (i = 0; i < src.length; i++) {\n        dst[i + dstOffset] = src[i]\n      }\n    }\n\n    return dst\n  }\n\n  /**\n   * Fast method to advance the line by one position.  The oldest position is removed.\n   * @param position\n   */\n  MeshLine.prototype.advance = function(position) {\n    var positions = this._attributes.position.array\n    var previous = this._attributes.previous.array\n    var next = this._attributes.next.array\n    var l = positions.length\n\n    // PREVIOUS\n    memcpy(positions, 0, previous, 0, l)\n\n    // POSITIONS\n    memcpy(positions, 6, positions, 0, l - 6)\n\n    positions[l - 6] = position.x\n    positions[l - 5] = position.y\n    positions[l - 4] = position.z\n    positions[l - 3] = position.x\n    positions[l - 2] = position.y\n    positions[l - 1] = position.z\n\n    // NEXT\n    memcpy(positions, 6, next, 0, l - 6)\n\n    next[l - 6] = position.x\n    next[l - 5] = position.y\n    next[l - 4] = position.z\n    next[l - 3] = position.x\n    next[l - 2] = position.y\n    next[l - 1] = position.z\n\n    this._attributes.position.needsUpdate = true\n    this._attributes.previous.needsUpdate = true\n    this._attributes.next.needsUpdate = true\n  }\n\n  THREE.ShaderChunk['meshline_vert'] = [\n    '',\n    THREE.ShaderChunk.logdepthbuf_pars_vertex,\n    THREE.ShaderChunk.fog_pars_vertex,\n    '',\n    'attribute vec3 previous;',\n    'attribute vec3 next;',\n    'attribute float side;',\n    'attribute float width;',\n    'attribute float counters;',\n    '',\n    'uniform vec2 resolution;',\n    'uniform float lineWidth;',\n    'uniform vec3 color;',\n    'uniform float opacity;',\n    'uniform float sizeAttenuation;',\n    '',\n    'varying vec2 vUV;',\n    'varying vec4 vColor;',\n    'varying float vCounters;',\n    '',\n    'vec2 fix( vec4 i, float aspect ) {',\n    '',\n    '    vec2 res = i.xy / i.w;',\n    '    res.x *= aspect;',\n    '\t vCounters = counters;',\n    '    return res;',\n    '',\n    '}',\n    '',\n    'void main() {',\n    '',\n    '    float aspect = resolution.x / resolution.y;',\n    '',\n    '    vColor = vec4( color, opacity );',\n    '    vUV = uv;',\n    '',\n    '    mat4 m = projectionMatrix * modelViewMatrix;',\n    '    vec4 finalPosition = m * vec4( position, 1.0 );',\n    '    vec4 prevPos = m * vec4( previous, 1.0 );',\n    '    vec4 nextPos = m * vec4( next, 1.0 );',\n    '',\n    '    vec2 currentP = fix( finalPosition, aspect );',\n    '    vec2 prevP = fix( prevPos, aspect );',\n    '    vec2 nextP = fix( nextPos, aspect );',\n    '',\n    '    float w = lineWidth * width;',\n    '',\n    '    vec2 dir;',\n    '    if( nextP == currentP ) dir = normalize( currentP - prevP );',\n    '    else if( prevP == currentP ) dir = normalize( nextP - currentP );',\n    '    else {',\n    '        vec2 dir1 = normalize( currentP - prevP );',\n    '        vec2 dir2 = normalize( nextP - currentP );',\n    '        dir = normalize( dir1 + dir2 );',\n    '',\n    '        vec2 perp = vec2( -dir1.y, dir1.x );',\n    '        vec2 miter = vec2( -dir.y, dir.x );',\n    '        //w = clamp( w / dot( miter, perp ), 0., 4. * lineWidth * width );',\n    '',\n    '    }',\n    '',\n    '    //vec2 normal = ( cross( vec3( dir, 0. ), vec3( 0., 0., 1. ) ) ).xy;',\n    '    vec4 normal = vec4( -dir.y, dir.x, 0., 1. );',\n    '    normal.xy *= .5 * w;',\n    '    normal *= projectionMatrix;',\n    '    if( sizeAttenuation == 0. ) {',\n    '        normal.xy *= finalPosition.w;',\n    '        normal.xy /= ( vec4( resolution, 0., 1. ) * projectionMatrix ).xy;',\n    '    }',\n    '',\n    '    finalPosition.xy += normal.xy * side;',\n    '',\n    '    gl_Position = finalPosition;',\n    '',\n    THREE.ShaderChunk.logdepthbuf_vertex,\n    THREE.ShaderChunk.fog_vertex && '    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );',\n    THREE.ShaderChunk.fog_vertex,\n    '}',\n  ].join('\\n')\n\n  THREE.ShaderChunk['meshline_frag'] = [\n    '',\n    THREE.ShaderChunk.fog_pars_fragment,\n    THREE.ShaderChunk.logdepthbuf_pars_fragment,\n    '',\n    'uniform sampler2D map;',\n    'uniform sampler2D alphaMap;',\n    'uniform float useMap;',\n    'uniform float useAlphaMap;',\n    'uniform float useDash;',\n    'uniform float dashArray;',\n    'uniform float dashOffset;',\n    'uniform float dashRatio;',\n    'uniform float visibility;',\n    'uniform float alphaTest;',\n    'uniform vec2 repeat;',\n    '',\n    'varying vec2 vUV;',\n    'varying vec4 vColor;',\n    'varying float vCounters;',\n    '',\n    'void main() {',\n    '',\n    THREE.ShaderChunk.logdepthbuf_fragment,\n    '',\n    '    vec4 c = vColor;',\n    '    if( useMap == 1. ) c *= texture2D( map, vUV * repeat );',\n    '    if( useAlphaMap == 1. ) c.a *= texture2D( alphaMap, vUV * repeat ).a;',\n    '    if( c.a < alphaTest ) discard;',\n    '    if( useDash == 1. ){',\n    '        c.a *= ceil(mod(vCounters + dashOffset, dashArray) - (dashArray * dashRatio));',\n    '    }',\n    '    gl_FragColor = c;',\n    '    gl_FragColor.a *= step(vCounters, visibility);',\n    '',\n    THREE.ShaderChunk.fog_fragment,\n    '}',\n  ].join('\\n')\n\n  function MeshLineMaterial(parameters) {\n    THREE.ShaderMaterial.call(this, {\n      uniforms: Object.assign({}, THREE.UniformsLib.fog, {\n        lineWidth: { value: 1 },\n        map: { value: null },\n        useMap: { value: 0 },\n        alphaMap: { value: null },\n        useAlphaMap: { value: 0 },\n        color: { value: new THREE.Color(0xffffff) },\n        opacity: { value: 1 },\n        resolution: { value: new THREE.Vector2(1, 1) },\n        sizeAttenuation: { value: 1 },\n        dashArray: { value: 0 },\n        dashOffset: { value: 0 },\n        dashRatio: { value: 0.5 },\n        useDash: { value: 0 },\n        visibility: { value: 1 },\n        alphaTest: { value: 0 },\n        repeat: { value: new THREE.Vector2(1, 1) },\n      }),\n\n      vertexShader: THREE.ShaderChunk.meshline_vert,\n\n      fragmentShader: THREE.ShaderChunk.meshline_frag,\n    })\n\n    this.type = 'MeshLineMaterial'\n\n    Object.defineProperties(this, {\n      lineWidth: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.lineWidth.value\n        },\n        set: function(value) {\n          this.uniforms.lineWidth.value = value\n        },\n      },\n      map: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.map.value\n        },\n        set: function(value) {\n          this.uniforms.map.value = value\n        },\n      },\n      useMap: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.useMap.value\n        },\n        set: function(value) {\n          this.uniforms.useMap.value = value\n        },\n      },\n      alphaMap: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.alphaMap.value\n        },\n        set: function(value) {\n          this.uniforms.alphaMap.value = value\n        },\n      },\n      useAlphaMap: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.useAlphaMap.value\n        },\n        set: function(value) {\n          this.uniforms.useAlphaMap.value = value\n        },\n      },\n      color: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.color.value\n        },\n        set: function(value) {\n          this.uniforms.color.value = value\n        },\n      },\n      opacity: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.opacity.value\n        },\n        set: function(value) {\n          this.uniforms.opacity.value = value\n        },\n      },\n      resolution: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.resolution.value\n        },\n        set: function(value) {\n          this.uniforms.resolution.value.copy(value)\n        },\n      },\n      sizeAttenuation: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.sizeAttenuation.value\n        },\n        set: function(value) {\n          this.uniforms.sizeAttenuation.value = value\n        },\n      },\n      dashArray: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.dashArray.value\n        },\n        set: function(value) {\n          this.uniforms.dashArray.value = value\n          this.useDash = value !== 0 ? 1 : 0\n        },\n      },\n      dashOffset: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.dashOffset.value\n        },\n        set: function(value) {\n          this.uniforms.dashOffset.value = value\n        },\n      },\n      dashRatio: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.dashRatio.value\n        },\n        set: function(value) {\n          this.uniforms.dashRatio.value = value\n        },\n      },\n      useDash: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.useDash.value\n        },\n        set: function(value) {\n          this.uniforms.useDash.value = value\n        },\n      },\n      visibility: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.visibility.value\n        },\n        set: function(value) {\n          this.uniforms.visibility.value = value\n        },\n      },\n      alphaTest: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.alphaTest.value\n        },\n        set: function(value) {\n          this.uniforms.alphaTest.value = value\n        },\n      },\n      repeat: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.repeat.value\n        },\n        set: function(value) {\n          this.uniforms.repeat.value.copy(value)\n        },\n      },\n    })\n\n    this.setValues(parameters)\n  }\n\n  MeshLineMaterial.prototype = Object.create(THREE.ShaderMaterial.prototype)\n  MeshLineMaterial.prototype.constructor = MeshLineMaterial\n  MeshLineMaterial.prototype.isMeshLineMaterial = true\n\n  MeshLineMaterial.prototype.copy = function(source) {\n    THREE.ShaderMaterial.prototype.copy.call(this, source)\n\n    this.lineWidth = source.lineWidth\n    this.map = source.map\n    this.useMap = source.useMap\n    this.alphaMap = source.alphaMap\n    this.useAlphaMap = source.useAlphaMap\n    this.color.copy(source.color)\n    this.opacity = source.opacity\n    this.resolution.copy(source.resolution)\n    this.sizeAttenuation = source.sizeAttenuation\n    this.dashArray.copy(source.dashArray)\n    this.dashOffset.copy(source.dashOffset)\n    this.dashRatio.copy(source.dashRatio)\n    this.useDash = source.useDash\n    this.visibility = source.visibility\n    this.alphaTest = source.alphaTest\n    this.repeat.copy(source.repeat)\n\n    return this\n  }\n\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = {\n        MeshLine: MeshLine,\n        MeshLineMaterial: MeshLineMaterial,\n        MeshLineRaycast: MeshLineRaycast,\n      }\n    }\n    exports.MeshLine = MeshLine\n    exports.MeshLineMaterial = MeshLineMaterial\n    exports.MeshLineRaycast = MeshLineRaycast\n  } else {\n    root.MeshLine = MeshLine\n    root.MeshLineMaterial = MeshLineMaterial\n    root.MeshLineRaycast = MeshLineRaycast\n  }\n}.call(this))\n","import React, { useState, useMemo, useRef } from \"react\";\nimport * as THREE from \"three\";\nimport * as meshline from \"threejs-meshline\";\nimport { extend, Canvas, useFrame, useThree } from \"react-three-fiber\";\nimport chroma from \"chroma-js\";\n\nextend(meshline);\n\nconst Rig = ({ mouse }) => {\n  const { camera } = useThree();\n  useFrame(() => {\n    camera.position.x += (-mouse.current[0] / 50 - camera.position.x) * 0.09;\n    camera.position.y += (mouse.current[1] / 50 - camera.position.y) * 0.09;\n    camera.lookAt(0, 0, 0);\n  });\n  return null;\n};\n\nconst colors = [\n  \"#ECECDE\",\n  \"#F1EDBF\",\n  \"#F7E85A\",\n  \"#F6CF00\",\n  \"#F4AC03\",\n  \"#F2873E\",\n  \"#F16D63\",\n  \"#DB5E83\",\n  \"#B95AA4\",\n  \"#975CA0\",\n  \"#6B5AA5\",\n  \"#4051A7\",\n  \"#223F86\",\n  \"#153755\",\n  \"#0C2A32\",\n  \"#141920\",\n];\n\nconst BgLine = ({ color, lineWidth }) => {\n  const material = useRef();\n\n  // useFrame(() => {\n  //   console.log(material.current.uniforms);\n  // });\n\n  return (\n    <mesh>\n      <meshLine attach=\"geometry\" vertices={vertex} />\n      <meshLineMaterial\n        opacity={1}\n        attach=\"material\"\n        ref={material}\n        transparent\n        depthTest={false}\n        lineWidth={lineWidth}\n        color={color}\n      />\n    </mesh>\n  );\n};\n\nconst vertex = [new THREE.Vector3(0, -20, 0), new THREE.Vector3(0, 20, 0)];\n\nconst AnimatedLine = ({ color, speed, lineWidth }) => {\n  const material = useRef();\n\n  useFrame(() => {\n    material.current.uniforms.dashOffset.value -= speed;\n  });\n\n  return (\n    <mesh>\n      <meshLine attach=\"geometry\" vertices={vertex} />\n      <meshLineMaterial\n        opacity={0.9}\n        attach=\"material\"\n        ref={material}\n        transparent\n        depthTest={false}\n        lineWidth={lineWidth}\n        color={color}\n        dashArray={0.1}\n        dashRatio={0.9}\n      />\n    </mesh>\n  );\n};\n\nconst Lines = ({ count, lineWidth }) => {\n  const lines = useMemo(\n    () =>\n      new Array(count).fill().map((_, i) => {\n        return {\n          color: colors[i],\n          speed: Math.max(0.0001, 0.0007 * Math.random()),\n        };\n      }),\n    [count]\n  );\n  return lines.map((props, index) => (\n    <AnimatedLine\n      key={`animatedLine${index}`}\n      lineWidth={lineWidth}\n      {...props}\n    />\n  ));\n};\n\nexport default function () {\n  const [bgColor, setBgColor] = useState(\"var(--background-color)\");\n  const mouse = useRef([0, 0]);\n\n  const changeBg = () => {\n    const rando = colors[parseInt(colors.length * Math.random())];\n    const opacityRando = chroma(rando).alpha(0.8).hex();\n    setBgColor(opacityRando);\n  };\n\n  return (\n    <div\n      onClick={() => changeBg()}\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        flexFlow: \"column\",\n        width: \"100%\",\n        height: \"100vh\",\n        cursor: \"pointer\",\n        background: bgColor,\n      }}\n    >\n      <Canvas\n        colorManagement\n        camera={{ position: [0, 0, 10], near: 0.01, far: 25, fov: 25 }}\n        onMouseMove={(e) =>\n          (mouse.current = [\n            e.clientX - window.innerWidth / 2,\n            e.clientY - window.innerHeight / 2,\n          ])\n        }\n      >\n        <BgLine color={\"#ECECDE\"} lineWidth={2} />\n\n        <Lines count={colors.length} lineWidth={2} />\n\n        <Rig mouse={mouse} />\n      </Canvas>\n    </div>\n  );\n}\n"],"sourceRoot":""}
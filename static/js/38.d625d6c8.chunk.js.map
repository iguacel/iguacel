{"version":3,"sources":["exp/Exp21.js"],"names":["Thing","ref","useRef","data","useMemo","extensions","side","THREE","uniforms","time","type","value","resolution","uvRate1","transparent","fragmentShader","vertexShader","depthWrite","depthTest","blending","position","Float32Array","count","i","j","set","refMaterial","refGeo","useFrame","state","current","setAttribute","clock","getElapsedTime","attach","dark","useContext","ThemeContext","style","width","height","cursor","background","transition","camera","fov"],"mappings":"qIAAA,4DAoCA,SAASA,IA8BP,IA7BA,IAAMC,EAAMC,mBAENC,EAAOC,mBACX,iBAAO,CACLC,WAAY,kDACZC,KAAMC,aACNC,SAAU,CACRC,KAAM,CAAEC,KAAM,IAAKC,MAAO,GAC1BC,WAAY,CAAEF,KAAM,KAAMC,MAAO,IAAIJ,WACrCM,QAAS,CACPF,MAAO,IAAIJ,UAAc,EAAG,KAGhCO,aAAa,EACbC,eA7Cc,gSA8CdC,aAlCY,kZAmCZC,YAAY,EACZC,WAAW,EACXC,SAAUZ,sBAEZ,IAOEa,EAAW,IAAIC,aAAaC,KAEvBC,EAAI,EAAGA,EALJ,IAKeA,IACzB,IAAK,IAAIC,EAAI,EAAGA,EANN,IAMiBA,IACzBJ,EAASK,IACP,CAAqB,IAAnBF,EARI,IAQQ,IAA+B,IAAnBC,EARpB,IAQgC,IAAW,GACjD,GATM,IASOD,EAAIC,IAKvB,IAAME,EAAcxB,mBACdyB,EAASzB,mBAaf,OAXA0B,aAAS,SAACC,GAERF,EAAOG,QAAQC,aACb,WACA,IAAIxB,kBAAsBa,EAAU,IAItCM,EAAYI,QAAQtB,SAASC,KAAKE,MAAQkB,EAAMG,MAAMC,oBAItD,4BAAQhC,IAAKA,GACX,oCAAgBiC,OAAO,WAAWjC,IAAK0B,IACvC,kDAAgBO,OAAO,WAAWjC,IAAKyB,GAAiBvB,KAK/C,qBAAO,IACZgC,EAASC,qBAAWC,KAApBF,KAER,OACE,yBACEG,MAAO,CACLC,MAAO,OACPC,OAAQ,QACRC,OAAQ,UACRC,WAAYP,EACR,0BACA,2BACJQ,WAAY,qBAGd,kBAAC,IAAD,CAAQC,OAAQ,CAAEC,IAAK,GAAIzB,SAAU,CAAC,GAAI,IAAM,MAC9C,kBAACpB,EAAD,MACA,kBAAC,IAAD","file":"static/js/38.d625d6c8.chunk.js","sourcesContent":["import * as THREE from \"three\";\nimport React, { useRef, useMemo, useContext } from \"react\";\nimport { Canvas, useFrame } from \"react-three-fiber\";\nimport { TrackballControls } from \"drei\";\nimport ThemeContext from \"../context/ThemeContext\";\n\nconst fragmentShader = `\nuniform float time;\nuniform float progress;\nuniform float vProgress;\nvarying vec4 vPosition;\n\n  void main() {\n    float dist = length(gl_PointCoord - vec2(0.5));\n    float alpha = 1. - smoothstep(0.45,0.5,dist);\n    gl_FragColor = vec4(1.,1.,1.,alpha*0.5 + 0.5*vProgress);\n}`;\n\nconst vertexShader = `\n  uniform float time;\n\n  void main() {\n    vec3 newpos = position;\n\n    // infinite\n    newpos.y -= mod(time,3.);\n    float progress = smoothstep(-1.,5.,newpos.y);\n\n    newpos.z += progress*-newpos.y*newpos.y*newpos.y;\n\n    vec4 mvPosition = modelViewMatrix * vec4(newpos/10., 1.);\n    gl_PointSize = 5. * (1. / - mvPosition.z);\n    gl_Position = projectionMatrix * mvPosition;\n  }\n`;\n\nfunction Thing() {\n  const ref = useRef();\n\n  const data = useMemo(\n    () => ({\n      extensions: \"#extension GL_OES_standard_derivatives : enable\",\n      side: THREE.DoubleSide,\n      uniforms: {\n        time: { type: \"f\", value: 0 },\n        resolution: { type: \"v4\", value: new THREE.Vector4() },\n        uvRate1: {\n          value: new THREE.Vector2(1, 1),\n        },\n      },\n      transparent: true,\n      fragmentShader,\n      vertexShader,\n      depthWrite: false,\n      depthTest: false,\n      blending: THREE.AdditiveBlending,\n    }),\n    []\n  );\n\n  // count\n  let count = 100;\n\n  // attributes\n  let position = new Float32Array(count * count * 3);\n\n  for (let i = 0; i < count; i++) {\n    for (let j = 0; j < count; j++) {\n      position.set(\n        [(i / count - 0.5) * 20, (j / count - 0.5) * 20, 0],\n        3 * (count * i + j)\n      );\n    }\n  }\n\n  const refMaterial = useRef();\n  const refGeo = useRef();\n\n  useFrame((state) => {\n    // Geo\n    refGeo.current.setAttribute(\n      \"position\",\n      new THREE.BufferAttribute(position, 3)\n    );\n\n    // Material\n    refMaterial.current.uniforms.time.value = state.clock.getElapsedTime();\n  });\n\n  return (\n    <points ref={ref}>\n      <bufferGeometry attach=\"geometry\" ref={refGeo} />\n      <shaderMaterial attach=\"material\" ref={refMaterial} {...data} />\n    </points>\n  );\n}\n\nexport default () => {\n  const { dark } = useContext(ThemeContext);\n\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        height: \"100vh\",\n        cursor: \"pointer\",\n        background: dark\n          ? \"RGBA(34, 63, 134, 1.00)\"\n          : \"RGBA(110, 181, 87, 1.00)\",\n        transition: \"background 200ms\",\n      }}\n    >\n      <Canvas camera={{ fov: 65, position: [0, -0.5, -0.1] }}>\n        <Thing />\n        <TrackballControls />\n      </Canvas>\n    </div>\n  );\n};\n"],"sourceRoot":""}
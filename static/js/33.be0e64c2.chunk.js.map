{"version":3,"sources":["data/mov/NOV.csv","exp/Exp28.js"],"names":["module","exports","glsl","a","bb","map","x","i","flat","join","fragmentShader","vertexShader","extend","MapControls","LineMaterial","LineGeometry","Line2","colors","Shader","data","ref","useRef","shader","useMemo","extensions","side","THREE","uniforms","time","type","value","uvRate1","transparent","depthWrite","depthTest","blending","positions","Float32Array","nodes","angle","distance","offset","flow","forEach","o","d","f","centroids","lngO","latO","lngD","latD","pos","ang","getAngleVector","y","dis","getDistance","set","Math","random","refMaterial","refGeo","useFrame","state","current","setAttribute","clock","getElapsedTime","attach","isMobile","test","navigator","userAgent","dark","useContext","ThemeContext","useState","meta","visible","setVisible","useEffect","csv","nov","then","id","date","num","max","className","pixelRatio","min","window","devicePixelRatio","orthographic","camera","position","args","Map","MapCon","ExtrudeShape","key","name","LineShape","line","width","color","size","useThree","useUpdate","geom","setPositions","linewidth","resolution","height","geoPoints","points","push","pathShape","castShadow","bevelEnabled","controls","gl","minPan","maxPan","_v","copy","target","clamp","sub","update","domElement","dynamicDampingFactor","minZoom","maxZoom","enableRotate","enableZoom","enablePan","screenSpacePanning"],"mappings":"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","file":"static/js/33.be0e64c2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/NOV.6368a94e.csv\";","import React, { useRef, useState, useEffect, useMemo, useContext } from \"react\";\nimport * as THREE from \"three\";\nimport {\n  Canvas,\n  extend,\n  useFrame,\n  useThree,\n  useUpdate,\n} from \"react-three-fiber\";\nimport { LineMaterial } from \"three/examples/jsm/lines/LineMaterial\";\nimport { LineGeometry } from \"three/examples/jsm/lines/LineGeometry\";\nimport { Line2 } from \"three/examples/jsm/lines/Line2\";\nimport { MapControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport ThemeContext from \"../context/ThemeContext\";\n\nimport { csv } from \"d3\";\nimport { getAngleVector, getDistance } from \"../utils/utils\";\n\nimport { map, line } from \"../data/mov/map.js\";\nimport nov from \"../data/mov/NOV.csv\";\nimport centroids from \"../data/mov/centroids.js\";\n\n// Pointer event polyfill cuz safari sux\nimport \"pepjs\";\n\nimport \"./css/mov.css\";\n\nconst nodes = 63000;\n\n// Linting\nvar glsl = (a, ...bb) =>\n  a\n    .map((x, i) => [x, bb[i]])\n    .flat()\n    .join(\"\");\n\nconst fragmentShader = glsl`\nuniform float time;\nuniform float progress;\nuniform float vProgress;\nvarying vec4 vPosition;\nvarying float vAlpha;\n\n\n  void main() {\n    vec3 color = vec3(0.25,0.32,0.65);\n\n    float dist = length(gl_PointCoord - vec2(0.5));\n    float circle = 1. - smoothstep(0.49,0.5,dist);\n    gl_FragColor = vec4(color,circle*vAlpha/1.5);\n}`;\n\nconst vertexShader = glsl`\n  uniform float time;\n\n  attribute float angle;\n  attribute float distance;\n  attribute float offset;\n  attribute float flow;\n\n  varying float vAlpha;\n\n  void main() {\n\n    float current = mod(offset + time, distance);\n\n    float pct = current/distance;\n    vec3 newpos = position;\n\n    newpos.x += cos(angle)*current;\n    newpos.y += sin(angle)*current;\n\n    vAlpha = 0.1;\n\n    vec4 mvPosition = modelViewMatrix * vec4(newpos, 1.);\n    float f = flow / 120.;\n    float d1 = 100.;\n    float x1 = 0.1;\n    float d2 = d1 * sqrt(f / x1);\n    gl_PointSize = d2 / 100.;\n    gl_Position = projectionMatrix * mvPosition;\n  }\n`;\n\nextend({ MapControls, LineMaterial, LineGeometry, Line2 });\n\nconst colors = {\n  main: \"white\",\n  shape: \"#0B0D11\",\n  bgDark: \"#1C2230\",\n  bgLight: \"#262F42\",\n  lines: \"#404040\",\n};\n\nfunction Shader({ data }) {\n  const ref = useRef();\n\n  const shader = useMemo(\n    () => ({\n      extensions: \"#extension GL_OES_standard_derivatives : enable\",\n      side: THREE.DoubleSide,\n      uniforms: {\n        time: { type: \"f\", value: 0 },\n        uvRate1: {\n          value: new THREE.Vector2(1, 1),\n        },\n      },\n      fragmentShader,\n      vertexShader,\n      transparent: true,\n      depthWrite: false,\n      depthTest: false,\n      blending: THREE.AdditiveBlending,\n    }),\n    []\n  );\n\n  let positions = useMemo(() => new Float32Array(nodes * 3), []);\n\n  let angle = new Float32Array(nodes);\n  let distance = new Float32Array(nodes);\n  let offset = new Float32Array(nodes);\n  let flow = new Float32Array(nodes);\n\n  data.forEach((x, i) => {\n    const { o, d, f } = x;\n    const [lngO, latO] = centroids[`c${o}`];\n    const [lngD, latD] = centroids[`c${d}`];\n\n    const pos = [lngO, latO, 0];\n    const ang = [getAngleVector({ x: lngO, y: latO }, { x: lngD, y: latD })];\n    const dis = [\n      getDistance({ x: lngO, y: latO }, { x: lngD, y: latD }) > 0\n        ? getDistance({ x: lngO, y: latO }, { x: lngD, y: latD })\n        : 0.1,\n    ];\n\n    positions.set(pos, 3 * i);\n\n    angle.set(ang, i);\n\n    distance.set(dis, i);\n\n    offset.set([Math.random()], i);\n\n    flow.set([f], i);\n  });\n\n  const refMaterial = useRef();\n  const refGeo = useRef();\n\n  useFrame((state) => {\n    // Geo\n    refGeo.current.setAttribute(\n      \"position\",\n      new THREE.BufferAttribute(positions, 3)\n    );\n\n    refGeo.current.setAttribute(\"angle\", new THREE.BufferAttribute(angle, 1));\n\n    refGeo.current.setAttribute(\n      \"distance\",\n      new THREE.BufferAttribute(distance, 1)\n    );\n\n    refGeo.current.setAttribute(\"offset\", new THREE.BufferAttribute(offset, 1));\n\n    refGeo.current.setAttribute(\"flow\", new THREE.BufferAttribute(flow, 1));\n\n    // Material\n    refMaterial.current.uniforms.time.value = state.clock.getElapsedTime() * 10;\n  });\n\n  return (\n    <points ref={ref}>\n      <bufferGeometry attach=\"geometry\" ref={refGeo} />\n      <shaderMaterial attach=\"material\" ref={refMaterial} {...shader} />\n    </points>\n  );\n}\n\nexport default () => {\n  const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\n  const { dark } = useContext(ThemeContext);\n\n  const [visible, setVisible] = useState({ data: null, meta: null });\n\n  useEffect(() => {\n    csv(nov).then((data) => {\n      setVisible({\n        data: data,\n        meta: {\n          id: \"noviembre\",\n          date: \"Noviembre 2019\",\n          num: 26090,\n          max: 36943,\n        },\n      });\n    });\n  }, []);\n\n  return (\n    <div className=\"mov\">\n      <Canvas\n        pixelRatio={Math.min(2, isMobile ? window.devicePixelRatio : 1)}\n        orthographic={true}\n        camera={{ position: [0, 0, 500] }}\n      >\n        <color\n          attach=\"background\"\n          args={[dark ? colors.bgDark : colors.bgLight]}\n        />\n\n        <Map />\n\n        {visible.data && <Shader data={visible.data} />}\n\n        <MapCon />\n      </Canvas>\n    </div>\n  );\n};\n\nconst Map = () => {\n  return (\n    <>\n      {map.map((x) => {\n        return <ExtrudeShape data={x} key={`extrude${x.name}`} />;\n      })}\n      <LineShape data={line} />\n    </>\n  );\n};\n\nconst LineShape = ({ data, width = 1, color = \"gray\" }) => {\n  const { size } = useThree();\n\n  const ref = useUpdate((geom) => {\n    geom.setPositions(data);\n  }, []);\n\n  return (\n    <line2>\n      <lineGeometry attach=\"geometry\" ref={ref} />\n      <lineMaterial\n        attach=\"material\"\n        color={color}\n        linewidth={width}\n        resolution={[size.width, size.height]}\n      />\n    </line2>\n  );\n};\n\nconst ExtrudeShape = ({ data }) => {\n  const extrudeSettings = {\n    // steps: 1,\n    // depth: 1,\n    bevelEnabled: false,\n  };\n\n  var geoPoints = [];\n\n  data.points.forEach((x) => {\n    geoPoints.push(new THREE.Vector2(x[0], x[1]));\n  });\n\n  var pathShape = useMemo(() => new THREE.Shape(geoPoints), [geoPoints]);\n\n  return (\n    <mesh position={[0, 0, 0]} castShadow>\n      <extrudeBufferGeometry\n        attach=\"geometry\"\n        args={[[pathShape], extrudeSettings]}\n      />\n      <meshBasicMaterial attach=\"material\" color={colors.shape} />\n    </mesh>\n  );\n};\n\nconst MapCon = () => {\n  const controls = useRef();\n\n  const { camera, gl } = useThree();\n\n  var minPan = new THREE.Vector3(-350, -350, -350);\n  var maxPan = new THREE.Vector3(350, 350, 350);\n  var _v = new THREE.Vector3();\n\n  useFrame((state) => {\n    _v.copy(controls.current.target);\n    controls.current.target.clamp(minPan, maxPan);\n    _v.sub(controls.current.target);\n    state.camera.position.sub(_v);\n    controls.current.update();\n  });\n\n  return (\n    <mapControls\n      ref={controls}\n      args={[camera, gl.domElement]}\n      dynamicDampingFactor={0.3}\n      minZoom={0.35}\n      maxZoom={45}\n      enableRotate={false}\n      enableZoom={true}\n      enablePan={true}\n      screenSpacePanning={true}\n    />\n  );\n};\n"],"sourceRoot":""}
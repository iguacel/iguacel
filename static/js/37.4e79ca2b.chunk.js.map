{"version":3,"sources":["exp/Exp2.js"],"names":["margin","top","right","bottom","left","useMeasure","ref","width","height","palette","useContext","ThemeContext","dark","chroma","scale","mode","colors","n","Math","ceil","data","array","map","x","i","randomInt","y","xScale","scaleLinear","domain","range","yScale","hex","useMemo","hexbin","d","radius","extent","bins","style","background","overflow","viewBox","id","type","baseFrequency","result","filter","opacity","fill","transform","key","x1","y1","x2","y2","offset","stopColor","length","stopOpacity","darken","patternUnits","cx","cy","r","mask","transformOrigin","sides","size","center"],"mappings":"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","file":"static/js/37.4e79ca2b.chunk.js","sourcesContent":["import React, { useMemo, useContext } from \"react\";\nimport { array, randomInt } from \"../utils/utils\";\nimport { hexbin } from \"d3-hexbin\";\nimport { scaleLinear } from \"d3-scale\";\nimport { Polygon } from \"@vx/shape\";\nimport chroma from \"chroma-js\";\nimport { useMeasure } from \"react-use\";\nimport ThemeContext from \"../context/ThemeContext\";\n\nexport default function ({\n  margin = { top: 0, right: 0, bottom: 0, left: 0 },\n}) {\n  const [ref, { width, height }] = useMeasure();\n\n  const { dark } = useContext(ThemeContext);\n\n  const palette = dark\n    ? chroma.scale([\"#fafa6e\", \"#2A4858\"]).mode(\"lch\").colors(100)\n    : chroma.scale([\"#5AE5DD\", \"#AA4B9C\"]).mode(\"lch\").colors(100);\n\n  const radius = 40;\n  const n = Math.ceil(width / 12);\n  const data = array(n).map((x, i) => {\n    return { x: randomInt(0, 100), y: randomInt(0, 100) };\n  });\n\n  const xScale = scaleLinear()\n    .domain([0, 100])\n    .range([0, width - (margin.left + margin.right)]);\n\n  const yScale = scaleLinear()\n    .domain([0, 100])\n    .range([0, height - (margin.top + margin.bottom)]);\n\n  const hex = useMemo(() => {\n    return hexbin()\n      .x((d) => xScale(d.x))\n      .y((d) => yScale(d.y))\n      .radius(radius)\n      .extent([\n        [margin.left, margin.top],\n        [width - margin.right, height - margin.bottom],\n      ]);\n  });\n\n  const bins = useMemo(() => hex(data), [hex, data]);\n\n  return (\n    <div ref={ref} style={{ background: \"#0D0C19\" }}>\n      <svg\n        style={{ overflow: \"visible\" }}\n        width=\"100%\"\n        height=\"100vh\"\n        viewBox={`0 0 ${width} ${height}`}\n      >\n        <filter id=\"noise\">\n          <feTurbulence type=\"fractalNoise\" baseFrequency=\"25\" result=\"noisy\" />\n        </filter>\n\n        <rect\n          filter=\"url(#noise)\"\n          style={{ opacity: 0.2 }}\n          width={width}\n          height={height}\n          fill=\"transparent\"\n        />\n\n        <g\n          style={{\n            transform: `translate(${margin.right}px, ${margin.top}px) `,\n          }}\n        >\n          {bins.map((x, i) => {\n            return (\n              <g key={`polygon${i}`}>\n                <defs>\n                  <linearGradient\n                    id={`grad${i}`}\n                    x1={\"0%\"}\n                    y1=\"90%\"\n                    x2=\"100%\"\n                    y2={`${randomInt(0, 100)}%`}\n                  >\n                    <stop\n                      offset=\"0%\"\n                      style={{\n                        stopColor: palette[randomInt(1, palette.length)],\n                        stopOpacity: 0.9,\n                      }}\n                    />\n                    <stop\n                      offset=\"100%\"\n                      style={{\n                        stopColor: chroma(\n                          palette[randomInt(1, palette.length)]\n                        ).darken(),\n                        stopOpacity: 1,\n                      }}\n                    />\n                  </linearGradient>\n\n                  <pattern\n                    id={`pattern${i}`}\n                    x=\"0\"\n                    y=\"0\"\n                    width=\"4\"\n                    height=\"4\"\n                    patternUnits=\"userSpaceOnUse\"\n                  >\n                    <circle\n                      cx={randomInt(0, 12)}\n                      cy={randomInt(0, 12)}\n                      r={randomInt(0, 12)}\n                      fill=\"#999\"\n                    />\n                  </pattern>\n\n                  <mask\n                    id={`pattern-mask${i}`}\n                    x=\"0\"\n                    y=\"0\"\n                    width=\"1\"\n                    height=\"1\"\n                  >\n                    <rect\n                      x=\"0\"\n                      y=\"0\"\n                      width={\"100%\"}\n                      height={\"100%\"}\n                      fill={`url(#pattern${i})`}\n                    />\n                  </mask>\n                </defs>\n                <Polygon\n                  mask={`url(#pattern-mask${i})`}\n                  style={{\n                    transformOrigin: `50% 50%`,\n                  }}\n                  sides={6}\n                  size={radius * 1.75}\n                  key={`polygon${i}`}\n                  center={{ x: x.x, y: x.y }}\n                  fill={`url(#grad${i})`}\n                />\n              </g>\n            );\n          })}\n        </g>\n      </svg>\n    </div>\n  );\n}\n"],"sourceRoot":""}
{"version":3,"sources":["hooks/usePrevious.js","exp/Exp18.js"],"names":["usePrevious","value","ref","useRef","useEffect","current","extend","LineMaterial","LineGeometry","Line2","visible","MainCanvas","dark","useContext","ThemeContext","isEnglish","LanguageContext","language","colors","main","green","yellow","red","blue","purple","directionalRight","directionalLeft","ambient","fog","line","elements","data","order","index","name","name_es","element","element_es","planet","planet_es","faces","vertices","edges","angle","color","children","attach","args","style","display","justifyContent","alignItems","flexFlow","zIndex","width","height","className","flexAlign","colorManagement","pixelRatio","window","devicePixelRatio","gl","antialias","alpha","camera","fov","near","far","map","x","key","Shell","useFrame","rotation","z","position","scale","flatShading","CircleShape","segmentCount","radius","size","useThree","refLine","useUpdate","geom","Array","fill","reduce","acc","_","i","arr","theta","Math","PI","length","cos","sin","setPositions","linewidth","resolution","Lights","Dolly","finalZ","zRef","clock","getElapsedTime","stop","start","updateProjectionMatrix","Text","useState","visibleSt","setVisibleSt","useInterval","top","left","padding","flexDirection","marginTop","opacity","SvgComp","prevVisibleSt","polys","id","d","circles","r","interpolatorMainPath","interpolateFlubber","maxWidth","margin","version","xmlns","viewBox","xmlSpace","stroke","strokeWidth","strokeMiterlimit","cx","cy","reset","native","from","t","to","path","interpolate","transition","circle"],"mappings":"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","file":"static/js/25.b75915ff.chunk.js","sourcesContent":["import { useState, useRef, useEffect } from 'react'\n\n//It just gives you the previous value of whatever you give it (useful for previous props or state) in hook components\nexport const usePrevious = (value) => {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n\n\n//Utility hook to watch for a change from falsy to truthy\nexport const useTrigger = (val) => {\n  const [isTriggered, setIsTriggered] = useState(false)\n  const prevVal = usePrevious(val)\n  if (!prevVal && val && !isTriggered) {\n    setIsTriggered(true)\n  }\n  return isTriggered\n}","import React, { useRef, useState, useContext } from \"react\";\n// Context\nimport ThemeContext from \"../context/ThemeContext\";\nimport LanguageContext from \"../context/LanguageContext\";\n// R3F\nimport {\n  Canvas,\n  useFrame,\n  useUpdate,\n  extend,\n  useThree,\n} from \"react-three-fiber\";\n// Lines\nimport { LineMaterial } from \"three/examples/jsm/lines/LineMaterial\";\nimport { LineGeometry } from \"three/examples/jsm/lines/LineGeometry\";\nimport { Line2 } from \"three/examples/jsm/lines/Line2\";\n// Hooks\nimport useInterval from \"../hooks/useInterval\";\nimport { usePrevious } from \"../hooks/usePrevious\";\n// Spring\nimport { Spring, animated } from \"react-spring/renderprops\";\nimport { interpolate as interpolateFlubber } from \"flubber\";\n// css\nimport \"./css/cosmo.css\";\n\n// Extend lines\nextend({ LineMaterial, LineGeometry, Line2 });\n\n// GLOBALS\nconst depth = 70;\nconst scale = 0.3;\n\n// Duct tape alert. MainCanvas updates this variable inside the game loop, Text component sets it to state inside an useInterval.\n\nlet visible = \"\";\n\nexport default function () {\n  const { dark } = useContext(ThemeContext);\n  const { language } = useContext(LanguageContext);\n  const isEnglish = language.isEnglish;\n\n  const colors = {\n    main: \"white\",\n    green: \"#53A88A\",\n    yellow: \"#ECCA2F\",\n    red: \"#E55F25\",\n    blue: \"#4170AE\",\n    purple: \"#8E6BA6\",\n    directionalRight: \"#FFFFFF\",\n    directionalLeft: \"gray\",\n    ambient: dark ? \"#FFFFFF\" : \"#DBE7E5\",\n    fog: dark ? \"#1A1B1E\" : \"#FFFFFF\",\n    line: dark ? \"#3F3F3F\" : \"#DBE7E5\",\n  };\n\n  const elements = [\n    {\n      data: {\n        order: 1,\n        index: 0,\n        name: \"Cube\",\n        name_es: \"Cubo\",\n        element: \"Earth\",\n        element_es: \"Tierra\",\n        planet: [\"Saturn\", \"Jupiter\"],\n        planet_es: [\"Saturno\", \"Júpiter\"],\n        faces: 6,\n        vertices: 8,\n        edges: 12,\n        angle: 90,\n        color: colors.green,\n      },\n      children: <boxBufferGeometry attach=\"geometry\" args={[10, 10, 10]} />,\n    },\n    {\n      data: {\n        order: 2,\n        index: 1,\n        name: \"Tetrahedron\",\n        name_es: \"Tetraedro\",\n        element: \"Fire\",\n        element_es: \"Fuego\",\n        planet: [\"Jupiter\", \"Mars\"],\n        planet_es: [\"Júpiter\", \"Marte\"],\n        faces: 4,\n        vertices: 4,\n        edges: 6,\n        angle: 60,\n        color: colors.red,\n      },\n      children: <tetrahedronBufferGeometry attach=\"geometry\" args={[10, 0]} />,\n    },\n    {\n      data: {\n        order: 3,\n        index: 2,\n        name: \"Dodecahedron\",\n        name_es: \"Dodecaedro\",\n        element: \"Aether\",\n        element_es: \"Éter\",\n        planet: [\"Mars\", \"Earth\"],\n        planet_es: [\"Marte\", \"Tierra\"],\n        faces: 12,\n        vertices: 20,\n        edges: 30,\n        angle: 108,\n        color: colors.purple,\n      },\n      children: <dodecahedronBufferGeometry attach=\"geometry\" args={[10, 0]} />,\n    },\n    {\n      data: {\n        order: 4,\n        index: 3,\n        name: \"Icosahedron\",\n        name_es: \"Icosaedro\",\n        element: \"Water\",\n        element_es: \"Agua\",\n        planet: [\"Earth\", \"Venus\"],\n        planet_es: [\"Tierra\", \"Venus\"],\n        faces: 20,\n        vertices: 12,\n        edges: 30,\n        angle: 60,\n        color: colors.blue,\n      },\n      children: <icosahedronBufferGeometry attach=\"geometry\" args={[10, 0]} />,\n    },\n    {\n      data: {\n        order: 5,\n        index: 4,\n        name: \"Octahedron\",\n        name_es: \"Octaedro\",\n        element: \"Air\",\n        element_es: \"Aire\",\n        planet: [\"Venus\", \"Mercury\"],\n        planet_es: [\"Venus\", \"Mercurio\"],\n        faces: 8,\n        vertices: 6,\n        edges: 12,\n        angle: 60,\n        color: colors.yellow,\n      },\n      children: <octahedronGeometry attach=\"geometry\" args={[10, 0]} />,\n    },\n  ];\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        flexFlow: \"column\",\n        zIndex: 3,\n        width: \"100%\",\n        height: \"100vh\",\n      }}\n    >\n      <div className=\"wCanvas\" style={{ height: \"50vh\", width: \"100%\" }}>\n        <MainCanvas elements={elements} colors={colors} />\n      </div>\n\n      <div\n        className=\"wSvg\"\n        style={{\n          height: \"50vh\",\n          width: \"100%\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          flexAlign: \"center\",\n        }}\n      >\n        <Text\n          isEnglish={isEnglish}\n          colors={colors}\n          elements={elements}\n          colors={colors}\n          isEnglish={isEnglish}\n        />\n      </div>\n    </div>\n  );\n}\n\nconst MainCanvas = ({ elements, colors }) => {\n  return (\n    <Canvas\n      colorManagement\n      pixelRatio={window.devicePixelRatio || 1}\n      gl={{ antialias: true, alpha: true }}\n      camera={{ fov: 75, near: 0.1, far: 2000 }}\n    >\n      {elements.map((x) => {\n        return (\n          <Shell\n            key={`element${x.data.name}`}\n            children={x.children}\n            order={x.data.order}\n            color={x.data.color}\n            colors={colors}\n            elements={elements}\n            data={x.data}\n          />\n        );\n      })}\n\n      <Dolly elements={elements} />\n\n      <fog attach=\"fog\" name=\"near\" args={[colors.fog, 20, 0]} />\n      <Lights colors={colors} />\n    </Canvas>\n  );\n};\n\nconst Shell = ({ children, order, color, colors, data }) => {\n  const ref = useRef();\n  useFrame(({ camera }) => {\n    ref.current.rotation.x += 0.06;\n    ref.current.rotation.z += 0.01;\n\n    // Visible poly\n    if (\n      camera.position.z > -depth * order &&\n      camera.position.z < -depth * (order - 1)\n    ) {\n      // Updates global let\n      visible = data;\n    }\n  });\n\n  return (\n    <>\n      <group ref={ref} position={[0, 0, order * -depth]}>\n        <mesh scale={[scale, scale, scale]}>\n          {children}\n          <meshPhongMaterial\n            attach=\"material\"\n            color={color}\n            flatShading={true}\n          />\n        </mesh>\n        <CircleShape colors={colors} />\n      </group>\n    </>\n  );\n};\n\nconst CircleShape = ({ segmentCount = 62, radius = 15, colors }) => {\n  const { size } = useThree();\n  const refLine = useUpdate((geom) => {\n    let vertices = new Array(segmentCount).fill(0).reduce((acc, _, i, arr) => {\n      const theta = (i / segmentCount) * Math.PI * 2;\n\n      // Last point. Closes the path\n      if (i === arr.length - 1) {\n        acc = [\n          ...acc,\n          Math.cos(theta) * radius,\n          Math.sin(theta) * radius,\n          0,\n          Math.cos(Math.PI * 2) * radius,\n          Math.sin(Math.PI * 2) * radius,\n          0,\n        ];\n      }\n\n      acc = [...acc, Math.cos(theta) * radius, Math.sin(theta) * radius, 0];\n\n      return acc;\n    }, []);\n\n    geom.setPositions(vertices);\n  }, []);\n\n  return (\n    <line2>\n      <lineGeometry attach=\"geometry\" ref={refLine} />\n      <lineMaterial\n        attach=\"material\"\n        color={colors.line}\n        linewidth={4}\n        resolution={[size.width, size.height]}\n      />\n    </line2>\n  );\n};\n\nconst Lights = ({ colors }) => {\n  return (\n    <>\n      <directionalLight\n        position={[10, 10, 0]}\n        color={colors.directionalRight}\n      />\n      <directionalLight\n        position={[-10, -10, -10]}\n        color={colors.directionalLeft}\n      />\n      <ambientLight color={colors.ambient} />\n    </>\n  );\n};\n\nconst Dolly = ({ elements }) => {\n  let speed = 40;\n  let initialZ = 0;\n  let finalZ = -elements.length * depth;\n\n  let z = initialZ;\n  let zRef = useRef(z);\n\n  // From position initialZ to finalZ. Uses zRef\n  useFrame(({ clock, camera }) => {\n    if (zRef.current > finalZ) {\n      zRef.current = initialZ - clock.getElapsedTime() * speed;\n    } else {\n      zRef.current = initialZ;\n      clock.stop();\n      clock.start();\n    }\n\n    // Update matrix\n    camera.updateProjectionMatrix(void (camera.position.z = zRef.current));\n  });\n  return null;\n};\n\n// TEXT COMPONENT\n\nconst Text = ({ elements, isEnglish, colors }) => {\n  const [visibleSt, setVisibleSt] = useState(elements[0].data);\n\n  useInterval(() => {\n    if (visible.index !== visibleSt) {\n      setVisibleSt(visible);\n    }\n  }, [60]);\n\n  const { name, name_es, planet, planet_es, element, element_es } = visibleSt;\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"flex-start\",\n        alignItems: \"center\",\n        flexFlow: \"column\",\n        zIndex: 3,\n        width: \"100%\",\n        height: \"100vh\",\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n      }}\n    >\n      <div\n        className=\"info\"\n        style={{\n          height: \"50vh\",\n          width: \"100%\",\n          padding: \"1em\",\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          alignItems: \"center\",\n          flexDirection: \"column\",\n        }}\n      >\n        {visibleSt && (\n          <>\n            <div className=\"center\">\n              <h3 className=\"pm\" style={{ marginTop: \"60px\" }}>\n                {isEnglish ? name : name_es}\n              </h3>\n\n              <p>\n                <span className=\"spanStyle\" style={{ opacity: 0.5 }}>\n                  {isEnglish ? element : element_es}\n                </span>\n              </p>\n            </div>\n            <div className=\"center\">\n              <h4 className=\"pm\">\n                {isEnglish ? \"You are here\" : \"Estás aquí\"}\n              </h4>\n              <p>\n                <span style={{ opacity: 0.5 }}>\n                  {isEnglish ? \"Between \" : \"Entre \"}\n                </span>\n                <span className=\"spanStyle\">\n                  {isEnglish ? planet[0] : planet_es[0]}\n                </span>\n                <span style={{ opacity: 0.5 }}>\n                  {\" \"}\n                  {isEnglish ? \" and \" : \" y \"}\n                </span>\n                <span className=\"spanStyle\">\n                  {isEnglish ? planet[1] : planet_es[1]}\n                </span>\n              </p>\n            </div>\n          </>\n        )}\n      </div>\n\n      <div\n        className=\"info\"\n        style={{\n          width: \"100%\",\n          padding: \"0 1em 0 1em\",\n        }}\n      >\n        <SvgComp colors={colors} visibleSt={visibleSt} isEnglish={isEnglish} />\n      </div>\n    </div>\n  );\n};\n\nconst SvgComp = ({ visibleSt, colors, isEnglish }) => {\n  const { faces, edges, vertices } = visibleSt;\n\n  const strokeWidth = 5;\n\n  // Resets the spring\n  const prevVisibleSt = usePrevious(visibleSt);\n\n  const polys = [\n    { id: \"f1_cube\", d: \"M89.6 89.1h320.8v320.8H89.6z\" },\n    { id: \"f2_tetra\", d: \"M250 98.6L121.3 321.5h257.4z\" },\n    {\n      id: \"f3_dodeca\",\n      d:\n        \"M270.7 185.6h-41.4l-33.4 24.3-12.8 39.4 12.8 39.3 33.4 24.3h41.4l33.4-24.3 12.8-39.3-12.8-39.4z\",\n    },\n    { id: \"f4_hepta\", d: \"M250 192.1l-52.8 38.3 20.2 62.1h65.2l20.2-62.1z\" },\n    {\n      id: \"f5_octa\",\n      d: \"M249.971 209.111l39.103 39.103-39.103 39.103-39.103-39.103z\",\n    },\n  ];\n\n  const circles = [\n    { id: \"c1_saturn\", r: 230 },\n    { id: \"c2_jupiter\", r: 155 },\n    { id: \"c2_mars\", r: 72 },\n    { id: \"c4_earth\", r: 60 },\n    { id: \"c5_venus\", r: 43 },\n    { id: \"c6_mercury\", r: 25 },\n  ];\n\n  const interpolatorMainPath = interpolateFlubber(\n    polys[visibleSt.index ? visibleSt.index - 1 : 4].d,\n    polys[visibleSt.index ? visibleSt.index : 0].d\n  );\n\n  return (\n    <div\n      className=\"center\"\n      style={{\n        maxWidth: \"250px\",\n        margin: \"0 auto\",\n      }}\n    >\n      <svg\n        version=\"1.1\"\n        id=\"solids\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 500 500\"\n        xmlSpace=\"preserve\"\n        style={{ width: \"100%\" }}\n      >\n        {/* Circles */}\n        {circles.map((x) => {\n          return (\n            <circle\n              key={x.id}\n              fill=\"none\"\n              stroke={colors.line}\n              strokeWidth={strokeWidth}\n              strokeMiterlimit={10}\n              cx={250}\n              cy={250}\n              r={x.r}\n            />\n          );\n        })}\n\n        {/* Polys */}\n        {polys.map((x) => {\n          return (\n            <path\n              key={x.id}\n              fill=\"none\"\n              stroke={colors.line}\n              strokeWidth={strokeWidth}\n              strokeMiterlimit={10}\n              d={x.d}\n            />\n          );\n        })}\n\n        {/* Spring */}\n        {visibleSt?.order && (\n          <Spring\n            reset={prevVisibleSt?.order !== visibleSt?.order}\n            native\n            from={{\n              t: 0,\n            }}\n            to={{\n              t: 1,\n            }}\n          >\n            {({ t }) => (\n              <>\n                <animated.path\n                  d={t.interpolate(interpolatorMainPath)}\n                  fill={visibleSt.color}\n                  style={{ transition: \"fill 700ms\" }}\n                />\n                {/* Inside */}\n                <animated.circle\n                  fill=\"none\"\n                  stroke=\"var(--foreground-color)\"\n                  strokeWidth={strokeWidth - 2}\n                  strokeMiterlimit={10}\n                  cx={250}\n                  cy={250}\n                  opacity={t}\n                  r={visibleSt.order && circles[visibleSt.order].r}\n                />\n                {/* Outside */}\n                <animated.circle\n                  fill=\"none\"\n                  stroke=\"var(--foreground-color)\"\n                  strokeWidth={strokeWidth - 2}\n                  strokeMiterlimit={10}\n                  cx={250}\n                  cy={250}\n                  opacity={t}\n                  r={visibleSt.order && circles[visibleSt.order - 1].r}\n                />\n              </>\n            )}\n          </Spring>\n        )}\n      </svg>\n\n      <div className=\"hideHeight\">\n        <p className=\"pm\">\n          <span style={{ opacity: 0.5 }}>\n            {isEnglish ? \"Faces: \" : \"Caras: \"}\n          </span>\n          <span className=\"spanStyle\">{faces}</span>\n        </p>\n\n        <p className=\"pm\">\n          <span style={{ opacity: 0.5 }}>\n            {isEnglish ? \"Edges: \" : \"Aristas: \"}\n          </span>\n          <span className=\"spanStyle\">{edges}</span>\n        </p>\n\n        <p className=\"pm\">\n          <span style={{ opacity: 0.5 }}>\n            {isEnglish ? \"Vertices: \" : \"Vértices: \"}\n          </span>\n          <span className=\"spanStyle\">{vertices}</span>\n        </p>\n      </div>\n    </div>\n  );\n};\n"],"sourceRoot":""}
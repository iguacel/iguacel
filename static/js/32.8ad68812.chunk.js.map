{"version":3,"sources":["exp/Exp26.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js"],"names":["glsl","a","bb","map","x","i","flat","join","vertexShader","fragmentShader","ExtrudeShape","dark","mesh","useRef","material","uniforms","useMemo","time","type","value","fogColor","useFrame","state","clock","getElapsedTime","current","THREE","rotation","z","pathShape","theta","Math","PI","r","sin","y","cos","moveTo","lineTo","ref","position","attach","args","steps","depth","bevelEnabled","side","useContext","ThemeContext","style","width","height","pixelRatio","window","devicePixelRatio","camera","fov","zoom","near","far","focus","_taggedTemplateLiteral","strings","raw","slice","Object","freeze","defineProperties"],"mappings":"qhDAMA,IAAMA,EAAO,SAACC,GAAD,2BAAOC,EAAP,iCAAOA,EAAP,yBACXD,EACGE,KAAI,SAACC,EAAGC,GAAJ,MAAU,CAACD,EAAGF,EAAGG,OACrBC,OACAC,KAAK,KAEJC,EAAeR,EAAH,KAmBZS,EAAiBT,EAAH,KA2CdU,EAAe,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAChBC,EAAOC,mBACPC,EAAWD,mBAEXE,EAAWC,mBACf,iBAAO,CACLC,KAAM,CAAEC,KAAM,IAAKC,MAAO,GAC1BC,SAAU,CAAEF,KAAM,IAAKC,MAAO,CAAC,EAAG,EAAG,OAEvC,IAGFE,aAAS,SAACC,GACR,IAAML,EAAOK,EAAMC,MAAMC,iBACzBZ,EAAKa,QAAQX,SAASC,SAASE,KAAKE,MAAQF,EAG1CH,EAASW,QAAQV,SAASK,SAASD,MADjCR,EACyC,IAAIe,QAC7C,GACA,IACA,KAGyC,IAAIA,QAC7C,IACA,IACA,KAGJd,EAAKa,QAAQE,SAASC,GAAK,OAM7B,IAHA,IACMC,EAAY,IAAIH,QAEbrB,EAAI,EAAGA,GAHC,IAGcA,IAAK,CAClC,IAAIyB,EAAS,EAAIC,KAAKC,GAAK3B,EAJZ,IAKX4B,EAAI,GAAM,YAAMF,KAAKG,IAAI,EAAIJ,EAAQ,GAAM,GAC3C1B,EAAI6B,EAAIF,KAAKG,IAAIJ,GACjBK,EAAIF,EAAIF,KAAKK,IAAIN,GACX,IAANzB,EACFwB,EAAUQ,OAAOjC,EAAG+B,GAEpBN,EAAUS,OAAOlC,EAAG+B,GAIxB,OACE,0BAAMI,IAAK3B,EAAM4B,SAAU,CAAC,EAAG,GAAI,IACjC,2CACEC,OAAO,WACPC,KAAM,CACJ,CAACb,GACD,CACEc,MAAO,IACPC,MAAO,GACPC,cAAc,MAIpB,oCACEN,IAAKzB,EACL2B,OAAO,WACPC,KAAM,CACJ,CACE3B,WACAP,aAAcA,EACdC,eAAgBA,EAChBqC,KAAMpB,mBAaH,qBAAO,IACZf,EAASoC,qBAAWC,KAApBrC,KAER,OACE,yBAAKsC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAASX,SAAU,aACtD,kBAAC,IAAD,CACEY,WAAYC,OAAOC,iBACnBC,OAAQ,CACNC,IAAK,GACLC,KAAM,EACNC,KAAM,IACNC,IAAK,GACLC,MAAO,GACPpB,SAAU,CAAC,EAAG,EAAG,MAGnB,kBAAC9B,EAAD,CAAcC,KAAMA,Q,gCC3Kb,SAASkD,EAAuBC,EAASC,GAKtD,OAJKA,IACHA,EAAMD,EAAQE,MAAM,IAGfC,OAAOC,OAAOD,OAAOE,iBAAiBL,EAAS,CACpDC,IAAK,CACH5C,MAAO8C,OAAOC,OAAOH,OAP3B","file":"static/js/32.8ad68812.chunk.js","sourcesContent":["import * as THREE from \"three\";\nimport React, { useMemo, useRef, useContext } from \"react\";\nimport ThemeContext from \"../context/ThemeContext\";\nimport { Canvas, useFrame } from \"react-three-fiber\";\n\n// Linting glsl\nconst glsl = (a, ...bb) =>\n  a\n    .map((x, i) => [x, bb[i]])\n    .flat()\n    .join(\"\");\n\nconst vertexShader = glsl`\n    varying vec2 vUv;\n    varying vec3 vPosition;\n\n    vec2 rotate(vec2 v, float a) {\n      float s = sin(a);\n      float c = cos(a);\n      mat2 m = mat2(c, -s, s, c);\n      return m * v;\n    }\n\n    void main() {\n      vUv = uv;\n      vPosition = position;\n      vec3 newpos = position;\n      newpos.xy = rotate(newpos.xy, position.z / 2.);\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(newpos, 1.0);\n    }`;\n\nconst fragmentShader = glsl`\nuniform float time;\nuniform vec3 fogColor;\nvarying vec2 vUv;\nvarying vec3 vPosition;\n\nvoid main() {\n  vec3 WHITE = vec3(0.54,0.46,0.31);\n  vec3 BLACK = vec3(0.10,0.11,0.12);\n\n  float pi = 3.1415926;\n\n  float threshold = 0.1;\n  float fline = sin(vUv.y*5.*pi);\n\n  float fline_a = float(abs(fline));\n\n  float k = 0.;\n  float sk = 0.;\n\n  if(fline<0.){\n    k = -1.;\n  } else {\n    k = 1.;\n  }\n\n  if(fline_a<threshold){\n    sk = (threshold - fline_a)/threshold;\n    k = k*(1. - sk) + fline_a*sk;\n  } else {\n    sk = 1.;\n  }\n\n  k = (k + 1.)/2.;\n\n  float fog = clamp((vPosition.z - abs(pow(sin(time),2.)) * 13.),0.,1.);\n\n  vec3 finalColor = mix(WHITE,BLACK,k);\n\n  finalColor = mix(fogColor,finalColor,fog);\n  gl_FragColor.rgba = vec4(finalColor, 1.0);\n}`;\n\nconst ExtrudeShape = ({ dark }) => {\n  const mesh = useRef();\n  const material = useRef();\n\n  const uniforms = useMemo(\n    () => ({\n      time: { type: \"f\", value: 0 },\n      fogColor: { type: \"v\", value: [0, 0, 0] },\n    }),\n    []\n  );\n\n  useFrame((state) => {\n    const time = state.clock.getElapsedTime();\n    mesh.current.material.uniforms.time.value = time;\n\n    if (dark) {\n      material.current.uniforms.fogColor.value = new THREE.Color(\n        0.1,\n        0.11,\n        0.12\n      );\n    } else {\n      material.current.uniforms.fogColor.value = new THREE.Color(\n        0.54,\n        0.46,\n        0.31\n      );\n    }\n    mesh.current.rotation.z += 0.01;\n  });\n\n  const segments = 300;\n  const pathShape = new THREE.Shape();\n\n  for (let i = 0; i <= segments; i++) {\n    let theta = (2 * Math.PI * i) / segments;\n    let r = 0.2 + 0.2 * Math.sin(2 * theta * 2) ** 2;\n    let x = r * Math.sin(theta);\n    let y = r * Math.cos(theta);\n    if (i === 0) {\n      pathShape.moveTo(x, y);\n    } else {\n      pathShape.lineTo(x, y);\n    }\n  }\n\n  return (\n    <mesh ref={mesh} position={[0, 0, -5]}>\n      <extrudeBufferGeometry\n        attach=\"geometry\"\n        args={[\n          [pathShape],\n          {\n            steps: 100,\n            depth: 15,\n            bevelEnabled: false,\n          },\n        ]}\n      />\n      <shaderMaterial\n        ref={material}\n        attach=\"material\"\n        args={[\n          {\n            uniforms,\n            vertexShader: vertexShader,\n            fragmentShader: fragmentShader,\n            side: THREE.DoubleSide,\n            // wireframe: true,\n            // transparent: true,\n            // depthWrite: false,\n            // depthTest: false,\n            // blending: THREE.AdditiveBlending,\n          },\n        ]}\n      />\n    </mesh>\n  );\n};\n\nexport default () => {\n  const { dark } = useContext(ThemeContext);\n\n  return (\n    <div style={{ width: \"100%\", height: \"100vh\", position: \"relative\" }}>\n      <Canvas\n        pixelRatio={window.devicePixelRatio}\n        camera={{\n          fov: 20,\n          zoom: 1,\n          near: 0.01,\n          far: 90,\n          focus: 10,\n          position: [0, 0, 10],\n        }}\n      >\n        <ExtrudeShape dark={dark} />\n      </Canvas>\n    </div>\n  );\n};\n","export default function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}"],"sourceRoot":""}